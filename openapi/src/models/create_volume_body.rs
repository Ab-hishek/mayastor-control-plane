#![allow(
    clippy::too_many_arguments,
    clippy::new_without_default,
    non_camel_case_types,
    unused_imports
)]
/*
 * Mayastor RESTful API
 *
 * The version of the OpenAPI document: v0
 *
 * Generated by: https://github.com/openebs/openapi-generator
 */

use crate::apis::IntoVec;

/// CreateVolumeBody : Create Volume Body JSON

/// Create Volume Body JSON
#[derive(Clone, Debug, Default, PartialEq, Serialize, Deserialize)]
pub struct CreateVolumeBody {
    #[serde(rename = "policy")]
    pub policy: crate::models::VolumePolicy,
    /// number of storage replicas
    #[serde(rename = "replicas")]
    pub replicas: u8,
    /// size of the volume in bytes
    #[serde(rename = "size")]
    pub size: u64,
    #[serde(rename = "topology", skip_serializing_if = "Option::is_none")]
    pub topology: Option<crate::models::Topology>,
    /// Optionally used to store custom volume information
    #[serde(rename = "labels", skip_serializing_if = "Option::is_none")]
    pub labels: Option<::std::collections::HashMap<String, String>>,
}

impl CreateVolumeBody {
    /// CreateVolumeBody using only the required fields
    pub fn new(
        policy: impl Into<crate::models::VolumePolicy>,
        replicas: impl Into<u8>,
        size: impl Into<u64>,
    ) -> CreateVolumeBody {
        CreateVolumeBody {
            policy: policy.into(),
            replicas: replicas.into(),
            size: size.into(),
            topology: None,
            labels: None,
        }
    }
    /// CreateVolumeBody using all fields
    pub fn new_all(
        policy: impl Into<crate::models::VolumePolicy>,
        replicas: impl Into<u8>,
        size: impl Into<u64>,
        topology: impl Into<Option<crate::models::Topology>>,
        labels: impl Into<Option<::std::collections::HashMap<String, String>>>,
    ) -> CreateVolumeBody {
        CreateVolumeBody {
            policy: policy.into(),
            replicas: replicas.into(),
            size: size.into(),
            topology: topology.into(),
            labels: labels.into(),
        }
    }
}
